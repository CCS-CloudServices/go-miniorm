// Code generated by MockGen. DO NOT EDIT.
// Source: orm.go

// Package miniorm is a generated GoMock package.
package miniorm

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	v9 "github.com/doug-martin/goqu/v9"
	gomock "github.com/golang/mock/gomock"
)

// MockTableNameGetter is a mock of TableNameGetter interface.
type MockTableNameGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTableNameGetterMockRecorder
}

// MockTableNameGetterMockRecorder is the mock recorder for MockTableNameGetter.
type MockTableNameGetterMockRecorder struct {
	mock *MockTableNameGetter
}

// NewMockTableNameGetter creates a new mock instance.
func NewMockTableNameGetter(ctrl *gomock.Controller) *MockTableNameGetter {
	mock := &MockTableNameGetter{ctrl: ctrl}
	mock.recorder = &MockTableNameGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableNameGetter) EXPECT() *MockTableNameGetterMockRecorder {
	return m.recorder
}

// GetTableName mocks base method.
func (m *MockTableNameGetter) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockTableNameGetterMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockTableNameGetter)(nil).GetTableName))
}

// MockIDGetter is a mock of IDGetter interface.
type MockIDGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIDGetterMockRecorder
}

// MockIDGetterMockRecorder is the mock recorder for MockIDGetter.
type MockIDGetterMockRecorder struct {
	mock *MockIDGetter
}

// NewMockIDGetter creates a new mock instance.
func NewMockIDGetter(ctrl *gomock.Controller) *MockIDGetter {
	mock := &MockIDGetter{ctrl: ctrl}
	mock.recorder = &MockIDGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGetter) EXPECT() *MockIDGetterMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIDGetter) GetID() (string, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockIDGetterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIDGetter)(nil).GetID))
}

// MockIDSetter is a mock of IDSetter interface.
type MockIDSetter struct {
	ctrl     *gomock.Controller
	recorder *MockIDSetterMockRecorder
}

// MockIDSetterMockRecorder is the mock recorder for MockIDSetter.
type MockIDSetterMockRecorder struct {
	mock *MockIDSetter
}

// NewMockIDSetter creates a new mock instance.
func NewMockIDSetter(ctrl *gomock.Controller) *MockIDSetter {
	mock := &MockIDSetter{ctrl: ctrl}
	mock.recorder = &MockIDSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDSetter) EXPECT() *MockIDSetterMockRecorder {
	return m.recorder
}

// SetID mocks base method.
func (m *MockIDSetter) SetID(id int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", id)
}

// SetID indicates an expected call of SetID.
func (mr *MockIDSetterMockRecorder) SetID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIDSetter)(nil).SetID), id)
}

// MockUniqueGetter is a mock of UniqueGetter interface.
type MockUniqueGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUniqueGetterMockRecorder
}

// MockUniqueGetterMockRecorder is the mock recorder for MockUniqueGetter.
type MockUniqueGetterMockRecorder struct {
	mock *MockUniqueGetter
}

// NewMockUniqueGetter creates a new mock instance.
func NewMockUniqueGetter(ctrl *gomock.Controller) *MockUniqueGetter {
	mock := &MockUniqueGetter{ctrl: ctrl}
	mock.recorder = &MockUniqueGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUniqueGetter) EXPECT() *MockUniqueGetterMockRecorder {
	return m.recorder
}

// GetUniqueExpression mocks base method.
func (m *MockUniqueGetter) GetUniqueExpression() v9.Ex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueExpression")
	ret0, _ := ret[0].(v9.Ex)
	return ret0
}

// GetUniqueExpression indicates an expected call of GetUniqueExpression.
func (mr *MockUniqueGetterMockRecorder) GetUniqueExpression() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueExpression", reflect.TypeOf((*MockUniqueGetter)(nil).GetUniqueExpression))
}

// MockOnCreator is a mock of OnCreator interface.
type MockOnCreator struct {
	ctrl     *gomock.Controller
	recorder *MockOnCreatorMockRecorder
}

// MockOnCreatorMockRecorder is the mock recorder for MockOnCreator.
type MockOnCreatorMockRecorder struct {
	mock *MockOnCreator
}

// NewMockOnCreator creates a new mock instance.
func NewMockOnCreator(ctrl *gomock.Controller) *MockOnCreator {
	mock := &MockOnCreator{ctrl: ctrl}
	mock.recorder = &MockOnCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnCreator) EXPECT() *MockOnCreatorMockRecorder {
	return m.recorder
}

// OnCreate mocks base method.
func (m *MockOnCreator) OnCreate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnCreate")
}

// OnCreate indicates an expected call of OnCreate.
func (mr *MockOnCreatorMockRecorder) OnCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCreate", reflect.TypeOf((*MockOnCreator)(nil).OnCreate))
}

// MockOnUpdater is a mock of OnUpdater interface.
type MockOnUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOnUpdaterMockRecorder
}

// MockOnUpdaterMockRecorder is the mock recorder for MockOnUpdater.
type MockOnUpdaterMockRecorder struct {
	mock *MockOnUpdater
}

// NewMockOnUpdater creates a new mock instance.
func NewMockOnUpdater(ctrl *gomock.Controller) *MockOnUpdater {
	mock := &MockOnUpdater{ctrl: ctrl}
	mock.recorder = &MockOnUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnUpdater) EXPECT() *MockOnUpdaterMockRecorder {
	return m.recorder
}

// OnUpdate mocks base method.
func (m *MockOnUpdater) OnUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdate")
}

// OnUpdate indicates an expected call of OnUpdate.
func (mr *MockOnUpdaterMockRecorder) OnUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockOnUpdater)(nil).OnUpdate))
}

// MockDBWrapper is a mock of DBWrapper interface.
type MockDBWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockDBWrapperMockRecorder
}

// MockDBWrapperMockRecorder is the mock recorder for MockDBWrapper.
type MockDBWrapperMockRecorder struct {
	mock *MockDBWrapper
}

// NewMockDBWrapper creates a new mock instance.
func NewMockDBWrapper(ctrl *gomock.Controller) *MockDBWrapper {
	mock := &MockDBWrapper{ctrl: ctrl}
	mock.recorder = &MockDBWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBWrapper) EXPECT() *MockDBWrapperMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDBWrapper) Delete(table interface{}) *v9.DeleteDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", table)
	ret0, _ := ret[0].(*v9.DeleteDataset)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBWrapperMockRecorder) Delete(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBWrapper)(nil).Delete), table)
}

// Exec mocks base method.
func (m *MockDBWrapper) Exec(query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBWrapperMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBWrapper)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockDBWrapper) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBWrapperMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDBWrapper)(nil).ExecContext), varargs...)
}

// From mocks base method.
func (m *MockDBWrapper) From(cols ...interface{}) *v9.SelectDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "From", varargs...)
	ret0, _ := ret[0].(*v9.SelectDataset)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockDBWrapperMockRecorder) From(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockDBWrapper)(nil).From), cols...)
}

// Insert mocks base method.
func (m *MockDBWrapper) Insert(table interface{}) *v9.InsertDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", table)
	ret0, _ := ret[0].(*v9.InsertDataset)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDBWrapperMockRecorder) Insert(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDBWrapper)(nil).Insert), table)
}

// Query mocks base method.
func (m *MockDBWrapper) Query(query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBWrapperMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBWrapper)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockDBWrapper) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBWrapperMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDBWrapper)(nil).QueryContext), varargs...)
}

// Select mocks base method.
func (m *MockDBWrapper) Select(cols ...interface{}) *v9.SelectDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*v9.SelectDataset)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDBWrapperMockRecorder) Select(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBWrapper)(nil).Select), cols...)
}

// Truncate mocks base method.
func (m *MockDBWrapper) Truncate(table ...interface{}) *v9.TruncateDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range table {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Truncate", varargs...)
	ret0, _ := ret[0].(*v9.TruncateDataset)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockDBWrapperMockRecorder) Truncate(table ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockDBWrapper)(nil).Truncate), table...)
}

// Update mocks base method.
func (m *MockDBWrapper) Update(table interface{}) *v9.UpdateDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", table)
	ret0, _ := ret[0].(*v9.UpdateDataset)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBWrapperMockRecorder) Update(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBWrapper)(nil).Update), table)
}

// MockORM is a mock of ORM interface.
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
}

// MockORMMockRecorder is the mock recorder for MockORM.
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance.
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockORM) Count(ctx context.Context, tableName string, expression v9.Expression) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, tableName, expression)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockORMMockRecorder) Count(ctx, tableName, expression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockORM)(nil).Count), ctx, tableName, expression)
}

// Create mocks base method.
func (m *MockORM) Create(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockORMMockRecorder) Create(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockORM)(nil).Create), ctx, entry)
}

// CreateOrUpdate mocks base method.
func (m *MockORM) CreateOrUpdate(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockORMMockRecorder) CreateOrUpdate(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockORM)(nil).CreateOrUpdate), ctx, entry)
}

// Delete mocks base method.
func (m *MockORM) Delete(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockORMMockRecorder) Delete(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockORM)(nil).Delete), ctx, entry)
}

// Get mocks base method.
func (m *MockORM) Get(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockORMMockRecorder) Get(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockORM)(nil).Get), ctx, entry)
}

// GetDBWrapper mocks base method.
func (m *MockORM) GetDBWrapper() DBWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBWrapper")
	ret0, _ := ret[0].(DBWrapper)
	return ret0
}

// GetDBWrapper indicates an expected call of GetDBWrapper.
func (mr *MockORMMockRecorder) GetDBWrapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBWrapper", reflect.TypeOf((*MockORM)(nil).GetDBWrapper))
}

// GetWithXLock mocks base method.
func (m *MockORM) GetWithXLock(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithXLock", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWithXLock indicates an expected call of GetWithXLock.
func (mr *MockORMMockRecorder) GetWithXLock(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithXLock", reflect.TypeOf((*MockORM)(nil).GetWithXLock), ctx, entry)
}

// Query mocks base method.
func (m *MockORM) Query(ctx context.Context, params QueryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockORMMockRecorder) Query(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockORM)(nil).Query), ctx, params)
}

// QueryWithXLock mocks base method.
func (m *MockORM) QueryWithXLock(ctx context.Context, params QueryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithXLock", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryWithXLock indicates an expected call of QueryWithXLock.
func (mr *MockORMMockRecorder) QueryWithXLock(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithXLock", reflect.TypeOf((*MockORM)(nil).QueryWithXLock), ctx, params)
}

// Update mocks base method.
func (m *MockORM) Update(ctx context.Context, entry interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockORMMockRecorder) Update(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockORM)(nil).Update), ctx, entry)
}

// WithTx mocks base method.
func (m *MockORM) WithTx(executeFunc func(ORM) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", executeFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockORMMockRecorder) WithTx(executeFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockORM)(nil).WithTx), executeFunc)
}
